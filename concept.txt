TITLE: FinDeDupe — Final Technical Blueprint + Critically Reviewed Build Plan (for a Coding Agent)

PURPOSE
- This document is the authoritative guide for implementing FinDeDupe (“a duplicate manager for Jellyfin”) v0.
- It has been critically reviewed to eliminate ambiguity, conflicting guidance, and hidden assumptions.
- Global directives for the agent:
  1) Ensure quality of core functions over adding features.
  2) Apply industry standards and best practices.
  3) Do not take shortcuts.
  4) Test and validate before presenting any task/milestone as “complete”.

======================================================================
A) LOCKED DECISIONS (scope and behavior)
======================================================================
1) Name/Brand: FinDeDupe. Use this consistently across namespaces, manifest, UI strings, and routes.
2) Jellyfin Compatibility: Support Jellyfin Server/Web ≥ 10.10.7.
3) Template Baseline: Pin to a specific commit of jellyfin-plugin-template at scaffold-time and record that hash in the repo (README). Do not change template expectations without updating this plan and the pinned hash.
4) v0 Scope: Detect duplicates forINDIVIDUAL MOVIES and WHOLE SERIES only (no episode-level dedupe in v0). 
5) Deletion Semantics: “Delete” means: (a) remove the library entry from the DB, (b) delete the media directory/file plus all recognized sidecar files (.nfo, .jpg/.jpeg, .png, .srt, .sub, .idx, .nzb, .torrent, .txt, .xml, .json, .srr, .sfv), and (c) delete the containing folder if and only if it becomes empty or contains only recognized sidecars associated with the deleted item(s).
6) Access Control: Admin-only for all UI and server endpoints. Enforce server-side authorization; also gate the UI.
7) Confirmation: Destructive execution requires an exact typed confirmation: “DELETE N ITEMS” (where N is the number of items to be removed).
8) Logging & Retention: Per-run CSV logs; default retention 45 days; user-configurable setting in plugin configuration. Purge on startup and after each run.
9) Exclude System (NEW): Provide an “exclude” capability in configuration that prevents scanning and/or deletion of certain content. v0 supports:
   - Exclude by Library (selected library IDs).
   - Exclude by Path Prefix (absolute path starts-with).
   - Exclude by Glob Pattern (limited wildcards: * and **).
   Exclusions apply early (pre-scan filter) and during plan/execute (safety re-check). Excludes always win over include heuristics.

======================================================================
B) CONSISTENCY & RISK REVIEW (devil’s advocate)
======================================================================
- Movies vs Series: To avoid leakage from earlier drafts, remove all movie-specific code paths, tests, and UI labels in v0. Everything must assume SERIES-only.
- Deletion + Sidecars + Folder Removal: Jellyfin’s delete call may not remove all sidecars/folders. We will use Jellyfin delete for the item and then perform controlled filesystem cleanup. Risks:
  - Permissions: The Jellyfin service account must have write/delete permission on all target paths.
  - Safety: Never delete outside of a known library root; enforce path ancestry checks to prevent directory traversal or cross-library deletes.
  - Mixed-content folders: If any non-sidecar, non-target files remain, skip folder deletion and log a warning.
- Fuzzy Matching: Title normalization and numerals mapping are powerful but dangerous if thresholds are too low. v0 prioritizes precision over recall to prevent accidental deletes.
- Concurrency & Idempotency: Only one execute-run at a time. Scans may be paginated/streamed and can be canceled. Executions are idempotent per item: already-deleted → “Skipped (NotFound)”.
- Template Drift: Template APIs and Jellyfin internals evolve. We pin the template commit at scaffold-time and keep that hash recorded to preserve consistency.
- Internationalization: v0 normalization handles English numerals and Roman numerals. No i18n in v0.
- Performance: Large libraries require pagination, streaming, and incremental processing. Avoid materializing full collections in memory.

======================================================================
C) ARCHITECTURE OVERVIEW (v0)
======================================================================
Project: Jellyfin.Plugin.FinDeDupe (TargetFramework: net8.0)

Core Components
1) TitleNormalizer (pure functions)
   - Normalize series titles: trim/collapse whitespace, remove bracketed tags ([1080p], [x264]), strip edition/codec words, lowercase, remove punctuation noise, normalize dashes, and map sequel numerals at the tail (roman↔digit↔word).
   - Output: TitleNorm string; flags (e.g., “hadEditionTag”).
2) FuzzyMatcher (pure functions)
   - Token-based similarity (token set/sort ratio); Levenshtein fallback for near-threshold tie-breaking.
   - Thresholds:
     - Score ≥ 90 ⇒ same title.
     - Score 85–89 ⇒ same *only if* Year matches OR a provider ID matches (e.g., tvdb/tmdb/imdb) at the series level.
3) DuplicateScanService
   - Enumerate Series only (respect excludes). Create MediaFingerprint objects: { ItemId, TitleRaw, TitleNorm, Year?, ProviderIds[], Path, RootFolder, Bytes? }
   - Bucket by (TitleNorm, Year, Kind=Series). Merge fuzzy-near buckets under strict thresholds.
   - Output: DuplicateGroup { GroupKey, Kind=Series, Candidates[], SuggestedKeeper? }.
4) DeletionService
   - BuildPlan: From chosen keeper + to-delete selections, compute DeletePlan with TotalBytes and folder-removal preview (which folders become empty).
   - Execute: Validate typed confirmation; for each item: call Jellyfin delete; then remove sidecars and, if safe, the containing folder; stream progress; produce DeleteResult and CSV.
5) ExclusionEngine
   - Given (LibraryIds, PathPrefixes, GlobPatterns), decide whether to include an item for scanning/deletion.
   - Path safety: all paths validated under known library roots.
6) Admin Controller (server-side)
   - GET /scan?cursor=&pageSize=&kind=Series
   - POST /plan
   - POST /execute
   - GET /log/{runId}
   - DELETE /logs/purge
   - (Optional) POST /cancel/{runId} for graceful cancellation (recommended).
7) Config & Retention
   - Settings: LogRetentionDays (default 45), Exclusions { LibraryIds[], PathPrefixes[], GlobPatterns[] }.
   - Purge old logs on startup and after each run.
8) Embedded Admin UI (vanilla HTML/JS)
   - Pages: Scan Results → Group Detail → Confirm (typed) → Results (CSV).
   - Admin-only menu entry under Plugins.

Data Structures (C#)
- MediaKey { Guid ItemId; string Kind /*"Series"*/ }
- MediaFingerprint { MediaKey Key; string TitleRaw; string TitleNorm; int? Year; string[] ProviderIds; long? Bytes; string Path; string RootFolder; }
- DuplicateGroup { string GroupKey; string Kind /*Series*/; List<MediaFingerprint> Candidates; MediaKey? SuggestedKeeper; }
- DeletePlan { Guid PlanId; string Kind /*Series*/; MediaKey Keeper; List<MediaKey> ToDelete; long TotalBytes; List<string> FoldersToRemovePreview; }
- DeleteResult { Guid RunId; DateTimeOffset Started; DateTimeOffset? Ended; int Requested; int Deleted; int Skipped; int Failed; List<ItemResult> Items; string CsvPath; }
- ItemResult { MediaKey Key; string Title; string Path; string Action; string Status; string Message; long? BytesFreed; }
- ErrorEnvelope { string Code; string Message; object? Details; }

======================================================================
D) EXCLUDE SYSTEM (specification)
======================================================================
Config Model
- Exclusions:
  - LibraryIds: string[] (Jellyfin library IDs). If non-empty, only scan series from non-excluded libraries (i.e., we SKIP excluded library IDs).
  - PathPrefixes: string[] (absolute path prefixes). Skip any item whose primary file path starts with one of these prefixes.
  - GlobPatterns: string[] (case-insensitive; * and ** supported; path globs like **/Archive/**). Apply to the full absolute path.
Resolution Rules
- If ANY exclusion rule matches an item, the item is excluded from scanning AND cannot be added to a plan/execute (server re-check).
- Exclusions are validated on save: nonexistent library IDs are kept but flagged in UI; invalid path prefixes/globs are rejected.
- UI: Provide a simple list editor for each category; note that excludes reduce coverage and may hide duplicates by design.

======================================================================
E) SECURITY, SAFETY, AND COMPLIANCE
======================================================================
- Admin-only: Enforce via Jellyfin auth/roles on every endpoint. Client-side gating is additional, not sufficient.
- Path Safety:
  - Resolve and normalize paths; require that paths are children of a configured Jellyfin library root. Reject otherwise.
  - For folder removal, list directory contents post-delete; remove only if empty or only recognized sidecars remain.
  - Never follow symlinks outside library roots; treat symlinks conservatively (configurable later).
- Race Conditions:
  - Between plan and execute, content may change. Execution re-validates existence, permissions, and exclusions. Missing items → “Skipped (NotFound)”. Newly excluded → “Skipped (Excluded)”.
- One Active Execution:
  - Allow multiple scans, but only one execute-run at a time. Queue or reject new execute requests with a clear error.
- Auditing:
  - Log actor (admin user), timestamp, runId, and actions.
- No external network calls; no telemetry; all local.

======================================================================
F) TESTING & ACCEPTANCE (Definition of Done)
======================================================================
Unit Tests
- TitleNormalizer: English words ↔ digits ↔ Roman numerals at tail; removal of edition tags; bracketed garbage; punctuation/whitespace normalization.
- FuzzyMatcher: ≥90 matches; 85–89 conditionally matches with Year/ProviderId; confirm negatives (e.g., “II” vs “11”).
- ExclusionEngine: library ID, path prefix, and glob behavior; precedence rules.
- DuplicateScanService: grouping stability, pagination, performance envelope (timeboxed).
- DeletionService:
  - BuildPlan math (TotalBytes).
  - Sidecar detection lists (positive and negative cases).
  - Folder safety: remove only when safe; skip with warnings.
- Retention: purge logic (boundary at N days); never delete recent logs.

Integration/Manual
- Admin enforcement: Non-admin → 403; Admin → 200.
- End-to-end flow on a synthetic library:
  - Two duplicate Series across different libraries with and without excludes.
  - Tricky title numerals; similar but distinct series should NOT be grouped.
  - Execute with typed confirmation; validate on-disk changes and DB removal.
  - CSV generation and retention purge.
- Performance: 10k-series test (synthetic) completes scan in a reasonable window with pagination and without excessive memory.

Acceptance Criteria
- All tests pass; no critical analyzer/StyleCop errors.
- Admin-only access enforced server-side.
- Duplicates for Series are correctly identified and reviewable.
- Delete execution requires exact typed confirmation and produces accurate CSV logs.
- Exclusion rules work as specified and are re-checked at execution time.
- Packaging/installation verified on Jellyfin ≥ 10.10.7.

======================================================================
G) API SPEC (admin-only; JSON)
======================================================================
Base: /Plugins/FinDeDupe

GET /scan?cursor=&pageSize=50
- Kind is implicitly Series for v0.
- Applies exclusions.
- Returns: { cursorNext?, groups: [{ groupKey, candidatesCount, titleNorm, year, sampleTitles[] }], stats{ scanned, excluded, grouped } }

POST /plan
- Body: { keeper: { itemId }, delete: [{ itemId }, ...] }
- Server recomputes safety (excludes, folder preview).
- Returns DeletePlan.

POST /execute
- Body: { planId, confirmation: "DELETE N ITEMS" }
- Starts execution (single active run). Streams progress (SSE or polling).
- Returns DeleteResult at completion.

GET /log/{runId}
- Returns DeleteResult summary and CSV link/path.

DELETE /logs/purge
- Immediately executes retention purge (useful for tests).

(Recommended) POST /cancel/{runId}
- Attempts to cancel an in-flight run gracefully.

Errors: { code, message, details? } with appropriate HTTP status.

======================================================================
H) ADMIN UI (embedded; vanilla)
======================================================================
- Scan Results:
  - Table: Title (raw sample), Year, Candidates Count, Open.
  - Toolbar: Refresh, Page controls, “Exclusions” (link to config).
- Group Detail:
  - List candidates with: TitleRaw, Path, Bytes, ProviderIds.
  - Radio to choose Keeper; checkboxes to choose deletions.
  - Button: “Build Plan”.
- Confirm:
  - Summary: N items to delete, total bytes to free, folders to remove (preview).
  - Text input must equal: “DELETE N ITEMS”.
  - Button: “Execute”.
- Results:
  - Live progress (deleted/failed/skipped).
  - CSV download link.
  - “View Logs” (history).
- Config Page:
  - LogRetentionDays (default 45, min 7, max 365).
  - Exclusions editor: libraries (multi-select), path prefixes, glob patterns (with help text).
  - Note warnings about reduced coverage.

======================================================================
I) DETAILED TASKS (small, simple, each with a clear goal & DoD)
======================================================================
Task 0 — Scaffold & Pin
- Goal: Generate project from pinned template commit; record hash in README.
- DoD: Debug build passes; Admin → Plugins shows FinDeDupe; config page renders.

Task 1 — Manifest & Config Model
- Goal: Implement manifest (name, description, GUID stable). Add Config with LogRetentionDays=45 and Exclusions { LibraryIds[], PathPrefixes[], GlobPatterns[] }.
- DoD: Config load/save OK; validation on save; retention value visible in UI.

Task 2 — ExclusionEngine
- Goal: Implement exclusion evaluation (library ID, path prefix, glob). Add path normalization and ancestry checks.
- DoD: Unit tests cover each exclusion mode and mixed cases; invalid inputs rejected in config.

Task 3 — TitleNormalizer (Series-focused)
- Goal: Implement normalization; English numeral + Roman mapping when at title tail; edition/garbage stripping.
- DoD: Unit tests for representative tricky titles (II/2/two, bracketed tags, punctuation noise).

Task 4 — FuzzyMatcher
- Goal: Implement token-set/sort similarity + Levenshtein fallback; thresholds as specified.
- DoD: Unit tests for ≥90, 85–89 with year/providerId, and negative pairs (“II” vs “11”, unrelated titles).

Task 5 — DuplicateScanService (Series-only)
- Goal: Enumerate Series (respect exclusions), fingerprint, bucket, merge fuzzy-near, build DuplicateGroups; pagination + cancellation.
- DoD: Unit tests on fixtures; scan stats logged; no OOM on large lists (streamed/paged).

Task 6 — SuggestedKeeper
- Goal: Compute non-binding suggestion: prefer higher quality/4K > better codecs > larger file > presence of external subs > newer modified date.
- DoD: Deterministic selection with unit tests.

Task 7 — Controller (scan/plan)
- Goal: Implement GET /scan (paged) and POST /plan; admin enforcement; structured errors.
- DoD: 403 vs 200 verified; JSON contracts stable and documented.

Task 8 — DeletionService (BuildPlan)
- Goal: From keeper + delete selections, compute TotalBytes; sidecar lists; folder-removal preview with safety rules.
- DoD: Unit tests validate bytes math and folder preview logic.

Task 9 — Execute (Jellyfin delete + sidecars + folder)
- Goal: POST /execute with confirmation phrase; single-run lock; progress events; robust error handling per item.
- DoD: Integration test confirms DB entry removed, files removed, empty folders removed safely, mixed-content folders preserved with warnings; partial failures recorded.

Task 10 — CSV Logging & Retention
- Goal: Write CSV per run; purge > LogRetentionDays on startup and post-run.
- DoD: CSV columns: RunId, Timestamp, ItemId, Title, Path, Action, Status, Message, BytesFreed. Retention unit tests pass.

Task 11 — Admin UI (vanilla)
- Goal: Implement four screens + config page. No frameworks; accessible keyboard navigation; clear destructive affordances.
- DoD: Manual end-to-end passes: scan → select → plan → typed confirm → execute → CSV → logs.

Task 12 — Acceptance & Packaging
- Goal: Ensure all quality gates; produce Release build; manual install on Jellyfin ≥ 10.10.7.
- DoD: Acceptance criteria met; smoke-test clean.

======================================================================
J) CODING GUIDELINES (must follow)
======================================================================
- Code Quality: Small, testable services; DI-friendly; no static hidden state.
- Cancellation & Timeouts: Long operations accept CancellationToken; timebox filesystem operations.
- Logging: Structured logs with RunId correlation; clear error codes (“NotFound”, “PermissionDenied”, “Excluded”, “Conflict”).
- No Shortcuts: Do not bypass safety checks; do not “best guess” deletes without explicit selection + typed confirmation.
- No Network Calls: Keep v0 offline; do not add telemetry.
- Lint/Analyzers: Keep StyleCop/analysers enabled. Public members documented. Fix all errors; warnings triaged or suppressed with rationale.
- Tests First: Implement unit tests alongside each service. Do not mark a task complete until tests and manual validations pass.

======================================================================
K) APPENDIX — PSEUDOCODE SNIPPETS
======================================================================
TitleNormalizer.Normalize(seriesTitle):
  t = lower(trim(seriesTitle))
  t = remove_bracketed_segments(t)         // [1080p], (x265), {whatever}
  t = strip_common_editions(t)             // remastered, extended, director's cut, etc.
  t = collapse_whitespace_and_punct(t)
  if ends_with_sequel_word_or_roman(t): t = normalize_trailing_sequel(t)  // "two"→"2"; "ii"→"2"
  return t

FuzzyMatcher.IsSameTitle(a, b, yearMatch, providerIdIntersect):
  score = token_set_ratio(a, b)
  if score >= 90: return true
  if score >= 85 and (yearMatch or providerIdIntersect): return true
  return false

ExclusionEngine.IsExcluded(item):
  if item.LibraryId in Exclusions.LibraryIds: return true
  if any(item.Path startsWith prefix for prefix in Exclusions.PathPrefixes): return true
  if any(matches_glob(item.Path, g) for g in Exclusions.GlobPatterns): return true
  return false

FolderRemoval.IsSafeToRemove(dir):
  entries = list(dir)
  if entries empty: return true
  if all(e is recognizedSidecar for e in entries): return true
  return false

======================================================================
L) NOTES FOR FUTURE MINOR RELEASES (not in v0)
======================================================================
- Episode-level dedupe; Movie support; “quarantine” (move instead of delete) mode; richer quality heuristics via MediaInfo; i18n; UI polish; advanced exclude rules (regex, provider-id blocklist).

— End of document —
